#include <stdio.h>
#include <algorithm>
using namespace std;


int map[500][500];
bool visited[500][500];

int n, m;
const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };
int ret = -1;
int block[4][4][2] = {
{{0,0},{1,0},{-1,0},{0,-1}},
{{0,0},{1,0},{0,1},{0,-1}},
{{0,0},{1,0},{-1,0},{0,1}},
{{0,0},{-1,0},{0,1},{0,-1}}
};
void dfs(int depth,int sum,int y, int x)
{
	if (depth == 4)
	{
		ret = max(sum, ret);
		return;
	}

	for (int dir = 0; dir < 4; dir++)
	{
		int ny = y + dy[dir];
		int nx = x + dx[dir];
		if (ny < 0 || nx < 0 || ny >= n || nx >= m)
			continue;
		if (visited[ny][nx] == false)
		{
			visited[ny][nx] = true;
			dfs(depth + 1, sum + map[ny][nx], ny, nx);
			visited[ny][nx] = false;
		}
	}
}
int main(void)
{
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			scanf("%d", &map[i][j]);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			visited[i][j] = true;
			dfs(1, map[i][j], i, j);
			visited[i][j] = false;
		}
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
		{
			for (int dir = 0; dir < 4; dir++)
			{
				int sum = 0;
				for (int blk = 0; blk < 4; blk++)
				{
					int nx = j + block[dir][blk][0];
					int ny = i + block[dir][blk][1];
					if (ny < 0 || nx < 0 || ny >= n || nx >= m)
						continue;
					sum += map[ny][nx];
				}
				ret = max(sum, ret);
			}

		}
	printf("%d", ret);
	return 0;
}
