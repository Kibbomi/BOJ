#include <stdio.h>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };

int map[100][100];
bool visited[100][100];
int result[5050];
int num;

struct coord {
	int y, x;
};
int main(void)
{
	int m, n, k;
	scanf("%d %d %d", &m, &n, &k);


	for (int i = 0; i < k; i++)
	{
		int sx, sy, ex, ey;


		scanf("%d %d %d %d", &sx, &sy, &ex, &ey);

		for (int i = sy; i < ey; i++)
			for (int j = sx; j < ex; j++)
				map[i][j] = 1;
	}
		
		for (int i = 0; i < m; i++)
		{
			for (int j = 0; j < n; j++)
			{
				queue<coord> q;

				if (map[i][j] == 0 && visited[i][j] == false)
				{
					coord now;
					int ret=0;
					now.y = i;
					now.x = j;

					q.push(now);
					visited[i][j] = true;
					map[i][j] = 2;

					while (!q.empty())
					{
						coord cur = q.front(); q.pop();
						ret += 1;
						for (int dir = 0; dir < 4; dir++)
						{
							coord next;
							next.y = cur.y + dy[dir];
							next.x = cur.x + dx[dir];

							if (next.y < 0 || next.y >= m || next.x < 0 || next.x >= n)
								continue;

							if (map[next.y][next.x] == 0 && visited[next.y][next.x] == false)
							{
								map[next.y][next.x] = 2;
								visited[next.y][next.x] = true;
								q.push(next);
							}
						}
					}
					result[num++] = ret;
				}
			}
		}
	

	for (int i = 0; i < num-1; i++)
		for (int j = i+1; j < num; j++)
		{
			if (result[i] > result[j])
			{
				int temp = result[j];
				result[j] = result[i];
				result[i] = temp;
			}
		}

	printf("%d\n", num);

	for (int i = 0; i < num; i++)
		printf("%d ", result[i]);


	return 0;
}
