#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

// 1그룹 2그룹 0->초기화
vector<int> v[20001];
int group[20001];
bool visited[20001];

int main(void)
{
	int t;
	scanf("%d", &t);
	int n, e;
	while (t--)
	{
		scanf("%d %d", &n, &e);
		//init
		for (int i = 1; i <= n; i++)
		{
			v[i].clear();
			group[i] = 0;
			visited[i] = false;
		}
		//data 입력
		int from, to;
		for (int i = 1; i <= e; i++)
		{
			scanf("%d %d", &from, &to);
			v[from].push_back(to);
			v[to].push_back(from);
		}

		//탐색
		//bfs
		queue<int> q;
		bool flag = true;
		while (flag)
		{
			flag = false;
			visited[from] = true;
			group[from] = 1;
			q.push(from);

			while (!q.empty())
			{
				int cur = q.front(); q.pop();
				int len = v[cur].size();

				for (int index = 0; index < len; index++)
				{
					if (visited[v[cur][index]] == false)
					{
						visited[v[cur][index]] = true;
						q.push(v[cur][index]);

						if (group[cur] == 1)
							group[v[cur][index]] = 2;
						else if (group[cur] == 2)
							group[v[cur][index]] = 1;
					}
				}
			}
			if (q.empty())
			{
				for (int i = 1; i <= n; i++)
					if (group[i] == 0)
					{
						from = i;
						flag = true;
					}
			}
		}

		//탐색 끝
		bool yes = true;
		for (int i = 1; i <= n; i++)
		{
			int len = v[i].size();
			for (int j = 0; j < len; j++)
			{
				if (group[i] == group[v[i][j]])
				{
					yes = false;
				}
			}
		}
	
		if (yes)
			printf("YES\n");
		else
			printf("NO\n");
	}
	return 0;
}
