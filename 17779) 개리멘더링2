#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

int n;
int a[20][20];
int ret = 123456789;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };

int main()
{
	cin >> n;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j)
			cin >> a[i][j];

	for (int x = 0; x < n-2; ++x)
	{
		for (int y = 1; y < n - 1; ++y)
		{
			for (int d1 = 1; d1 < y; ++d1)
			{
				for (int d2 = 1; y + d2 < n; ++d2)
				{
					//boundary check;
					if (x + d1 + d2 >= n)	continue;
					if (y - d1 < 0 || y + d2 >= n)	continue;

					//draw a line which have 5 value
					int mask[20][20] = { 0 };
					for (int i = 0; i <= d1; ++i)
					{
						mask[x + i][y - i] = 5;
						mask[x + d2 + i][y + d2 - i] = 5;
					}
					for (int i = 0; i <= d2; ++i)
					{
						mask[x + i][y + i] = 5;
						mask[x + d1 + i][y - d1 + i] = 5;
					}

					//BFS
					queue <pair<int, int>> q;
					bool visited[20][20] = { false };

					q.push(make_pair(0, 0));	//1
					mask[0][0] = 1;
					q.push(make_pair(0, n - 1));	//2
					mask[0][n - 1] = 2;
					q.push(make_pair(n - 1, 0));	//3
					mask[n - 1][0] = 3;
					q.push(make_pair(n - 1, n - 1));//4
					mask[n - 1][n - 1] = 4;
					visited[0][0] = true;
					visited[0][n - 1] = true;
					visited[n - 1][0] = true;
					visited[n - 1][n - 1] = true;

					while (!q.empty())
					{
						int cx = q.front().first;
						int cy = q.front().second;
						q.pop();

						for (int dir = 0; dir < 4; ++dir)
						{
							int nx = cx + dx[dir];
							int ny = cy + dy[dir];

							if (nx < 0 || ny < 0 || nx >= n || ny >= n || visited[nx][ny] || mask[nx][ny] == 5)
								continue;

							//masking
							if ((0 <= nx && nx < x + d1) && (0 <= ny && ny <= y))
								mask[nx][ny] = 1;

							if ((0 <= nx && nx <= x + d2) && (y < ny && ny < n))
								mask[nx][ny] = 2;

							if ((x + d1 <= nx && nx < n) && (0 <= ny && ny < y - d1 + d2))
								mask[nx][ny] = 3;

							if ((x + d2 < nx && nx < n) && (y - d1 + d2 <= ny && ny < n))
								mask[nx][ny] = 4;

							visited[nx][ny] = true;
							q.push(make_pair(nx, ny));
						}
					}

					for (int i = 0; i < n; ++i)
						for (int j = 0; j < n; ++j)
							if (mask[i][j] == 0)
								mask[i][j] = 5;

					//separation finished.
					int minval = 123456789;
					int maxval = -123456789;

					int val[5] = { 0 };
					for (int i = 0; i < n; ++i)
					{
						for (int j = 0; j < n; ++j)
						{
							if (mask[i][j] == 1)
							{
								val[0] += a[i][j];
							}
							else if (mask[i][j] == 2)
							{
								val[1] += a[i][j];
							}
							else if (mask[i][j] == 3)
							{
								val[2] += a[i][j];
							}
							else if (mask[i][j] == 4)
							{
								val[3] += a[i][j];
							}
							else if (mask[i][j] == 5)
							{
								val[4] += a[i][j];
							}
						}
					}
					for (int i = 0; i < 5; ++i)
					{
						minval = min(minval, val[i]);
						maxval = max(maxval, val[i]);
					}
					ret = min(ret, maxval - minval);
				}
			}
		}
	}

	cout << ret;
	return 0;
}
