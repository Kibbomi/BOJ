#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

class Segment_tree {
public:
	Segment_tree() {}

	Segment_tree(int tree_size)
	{
		tree.resize(tree_size);
	}

	int init_tree(vector<int> &arr, int node, int start, int end)
	{
		if (start == end)
			return tree[node] = arr[start];
		
		int mid = (start + end) / 2;

		return tree[node] = init_tree(arr, 2 * node, start, mid) *init_tree(arr, 2 * node + 1, mid + 1, end);
	}

	int update_tree( int node, int start, int end, int target, int val)
	{
		if (target < start || end < target)
			return tree[node];

		if (start == end)
			return tree[node] = val;

		int mid = (start + end) / 2;
		return tree[node] = update_tree( 2 * node, start, mid, target, val)*update_tree( 2 * node + 1, mid + 1, end, target, val);
	}

	int find_tree( int node, int start, int end, int left, int right)
	{
		if (end < left || right < start)
			return 1;

		if (left <= start && end <= right)
			return tree[node];

		int mid = (start + end) / 2;
		return find_tree( 2 * node, start, mid, left, right)*find_tree(2 * node + 1, mid + 1, end, left, right);
	}


	vector<int> tree;
};

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);

	int n, k;

	//while (scanf("%d %d", &n, &k) != EOF)
	while (cin >> n >> k)
	{
		vector<int> arr;
		arr.resize(n);
		for (int i = 0; i < n; ++i)
		{
			int val;
			//scanf("%d", &val);
			cin >> val;

			if (val >= 1)
				arr[i] = 1;
			else if (val <= -1)
				arr[i] = -1;
			else
				arr[i] = 0;
		}
		int h = (int)ceil(log2(n));
		int tree_size = 1 << (h + 1);

		Segment_tree tree(tree_size);
		tree.init_tree(arr, 1, 0, n - 1);

		for (int i = 0; i < k; ++i)
		{
			char op;
			int a, b;
			//scanf("%s %d %d", &op, &a, &b);
			cin >> op >> a >> b;
			
			if (op == 'C')
			{
				//change
				if (b >= 1)
					b = 1;
				else if (b <= -1)
					b = -1;
				else
					b = 0;
				tree.update_tree(1, 0, n - 1, a - 1, b);
			}
			else
			{
				//find
				int ans = tree.find_tree(1, 0, n - 1, a - 1, b - 1);

				/*if (ans == 1)
					printf("+");
				else if (ans == -1)
					printf("-");
				else
					printf("0");
					*/
				if (ans == 1)
					cout << "+";
				else if (ans == -1)
					cout << "-";
				else
					cout << "0";
			}
		}
		//printf("\n");
		cout << '\n';
	}

	return 0;
}
