#include <stdio.h>
#include <algorithm>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };

struct coord {
	int y, x;
	int time;
};

char map[12][6];


int main(void)
{
	for (int i = 0; i < 12; i++)
		scanf("%s", map[i]);



	int time = 0;
	while (1)
	{
		//grouping
		bool visited[12][6] = { false, };
		int group[12][6] = { 0, };
		int groupnum = 1;
		int groupdata[1000] = { 0 };
		bool flag = false;

		for (int i = 0; i < 12; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				if (visited[i][j] == false && map[i][j] != '.')
				{
					queue<coord> q;
					int num = 0;
					coord start;
					start.y = i; start.x = j;

					q.push(start);
					visited[i][j] = true;

					while (!q.empty())
					{
						coord cur = q.front(); q.pop();
						num++;
						group[cur.y][cur.x] = groupnum;
						for (int dir = 0; dir < 4; dir++)
						{
							coord next;
							next.x = cur.x + dx[dir];
							next.y = cur.y + dy[dir];

							if (next.x < 0 || next.y < 0 || next.x >= 6 || next.y >= 12)
								continue;

							if (map[next.y][next.x] == map[cur.y][cur.x] && visited[next.y][next.x] == false)
							{
								visited[next.y][next.x] = true;
								q.push(next);
							}
						}
					}
					if (num == 1)
					{
						//그룹이 안된경우
						group[i][j] = 0;
					}
					else
					{
						//그룹핑이 된 경우
						groupdata[groupnum++] = num;
						if (num >= 4)
							flag = true;
					}
				}
			}
		}
		//grouping finish
		if (!flag)
			break;
		else
			time++;
		//bombing

		for (int k = 1; k < groupnum; k++)
		{
			if (groupdata[k] >= 4)
			{
				for (int i = 0; i < 12; i++)
				{
					for (int j = 0; j < 6; j++)
					{
						if (group[i][j] == k)
							map[i][j] = '.';
					}
				}
			}
		}
		//bombing finish

		//down

		for (int i = 0; i < 6; i++)
		{
			for (int j = 11; j > 0; j--)
			{
				if (map[j][i] == '.')
				{
					for (int k = j - 1; k >= 0; k--)
					{
						if (map[k][i] != '.')
						{
							map[j][i] = map[k][i];
							map[k][i] = '.';
							break;
						}

					}
				}
			}
		}
		printf("");
	}
	printf("%d",time);
	return 0;
}
