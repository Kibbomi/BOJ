#include <stdio.h>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

int n;
int val[11];
vector<int> v[11];
int groupsrc[11];
int ret = 0x7fffffff;

struct COORD {
	int vertex;
	int g;
};


void dfs(int depth, int start, int limit)
{
	if (depth == limit)
	{
		int group[11];
		for (int i = 1; i <= n; i++)
			group[i] = 2;
		for (int i = 0; i < limit; i++)
			group[groupsrc[i]] = 1;

		int g1, g2;
		g1 = groupsrc[0];
		for (int i = 1; i <= n; i++)
			if (group[i] == 2)
			{
				g2 = i;
				break;
			}



		bool visited[11] = { false, };
		queue<COORD> q;
		COORD s1, s2;
		s1.vertex = g1, s1.g = 1;
		s2.vertex = g2, s2.g = 2;
		visited[s1.vertex] = visited[s2.vertex] = true;
		q.push(s1), q.push(s2);

		while (!q.empty())
		{
			COORD cur = q.front(); q.pop();

			int len = v[cur.vertex].size();

			for (int dir = 0; dir < len; dir++)
			{
				COORD next;
				next.vertex = v[cur.vertex][dir];
				next.g = cur.g;

				if (visited[next.vertex] == false && group[next.vertex] == cur.g)
				{
					visited[next.vertex] = true;
					q.push(next);
				}

			}
		}

		for (int i = 1; i <= n; i++)
			if (visited[i] == false)
				return;

		int sum1 = 0, sum2 = 0;
		for (int i = 1; i <= n; i++)
		{
			if (group[i] == 1)
				sum1 += val[i];
			else if (group[i] == 2)
				sum2 += val[i];
		}

		int temp = abs(sum1 - sum2);

		ret = min(ret, temp);

		return;
	}
	for (int i = start; i <= n; i++)
	{
		groupsrc[depth] = i;
		dfs(depth + 1, i + 1, limit);
		groupsrc[depth] = 0;
	}
	return;
}
int main(void)
{
	scanf("%d", &n);

	for (int i = 1; i <= n; i++)
		scanf("%d", &val[i]);

	
	for (int i = 1; i <= n; i++) {
		int num;
		scanf("%d", &num);
		for (int j = 0; j < num; j++)
		{
			int to;
			scanf("%d", &to);
			v[i].push_back(to);
		}
	}

	for (int i = 1; i<n; i++)
		dfs(0, 1, i);

	if (ret == 0x7fffffff)
		printf("-1");
	else
		printf("%d", ret);
	return 0;
}
