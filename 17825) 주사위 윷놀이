#include <iostream>
#include <algorithm>
using namespace std;
//bruteforce  , backtracking
int map[4][22] = { 
	{0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0},
{10,13,16,19,25,30,35,40,0},
{20,22,24,25,30,35,40,0},
{30,28,27,26,25,30,35,40,0} 
};
int maplen[4] = { 21,8,7,8 };

struct node {
	int roadnum;	//몇번째 길
	int location;	//길에서 몇번째 칸에 있는지
	bool arrived;
};

int dice[10];
int maxscore = -1;
int order[10];

bool isthereahorse(node horse[4], int n)
{
	//마지막칸, 시작칸 제외 n번째 말은 이미 이동한 상태
	for (int i = 0; i < 4; ++i)
	{
		if (i != n)
		{
			if (map[horse[n].roadnum][horse[n].location] == map[horse[i].roadnum][horse[i].location])
			{
				if (horse[i].roadnum == horse[n].roadnum)
				{
					return true;
				}
				else
				{
					if (maplen[horse[n].roadnum] - 4 <= horse[n].location && maplen[horse[i].roadnum] - 4 <= horse[i].location)
						return true;
					else
						return false;
				}
				
			}
		}
	}
	return false;
	
}
bool cango(node horse[4] , int n)
{
	if (horse[n].roadnum == 0 && horse[n].location >= maplen[0])
	{
		return false;
	}
	else if (horse[n].roadnum == 1 && horse[n].location >= maplen[1])
	{
		return false;
	}
	else if (horse[n].roadnum == 2 && horse[n].location >= maplen[2])
	{
		return false;
	}
	else if (horse[n].roadnum == 3 && horse[n].location >= maplen[3])
	{
		return false;
	}
	return true;
}
int isblue(node horse[4],int n)
{
	//0번 길에서
	if (horse[n].roadnum == 0)
	{
		if (horse[n].location == 5)
		{
			return 1;
		}
		else if (horse[n].location == 10)
		{
			return 2;
		}
		else if (horse[n].location == 15)
		{
			return 3;
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
}

void dfs(int depth)
{
	if (depth == 10)
	{
		//여기서 최대값
		node horse[4] = { 0 };
		int score = 0;

		for (int i = 0; i < 10; ++i)
		{
			//이동시켜보기
			if (cango(horse, order[i]))
			{
				//말이 놓여져있는지도 확인
				horse[order[i]].location += dice[i];

				//끝에 도착했는지 확인
				if (!cango(horse, order[i]))
				{
					horse[order[i]].arrived = true;	//location 끝으로 고정시켰음.
					horse[order[i]].location = maplen[horse[order[i]].roadnum];
				}
				
				
				//이동을 끝마쳤으니 점수에 더함.
				score += map[horse[order[i]].roadnum][horse[order[i]].location];

				//파란색이면 경로 변경시켜주기
				int changeroad = isblue(horse, order[i]);

				if (changeroad == 1 || changeroad == 2 || changeroad == 3)
				{
					horse[order[i]].roadnum = changeroad;
					horse[order[i]].location = 0;
				}

				//도착안했고 말이 중복된 위치에 있는지
				if (!horse[order[i]].arrived && isthereahorse(horse, order[i]))
					return;
			}
			else
				return;
		}

		if (maxscore < score)
			maxscore = score;
		return;
	}
	
	for (int num = 0; num < 4; ++num)
	{
		order[depth] = num;
		dfs(depth + 1);
	}
	
	return;
}

int main()
{
	for (int i = 0; i < 10; ++i)
		cin >> dice[i];


	dfs(0);

	cout << maxscore;
	return 0;
}
