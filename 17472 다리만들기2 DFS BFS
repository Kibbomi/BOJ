#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>
#define INF 0x7f7f7f7f
using namespace std;

int map[10][10];
int group[10][10];
int dist[7][7]; // use index 1~6
bool selected[7][7] = { false, };

int n, m;
const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };
int g_index = 1; 
int ret = INF;

void grouping()
{
	bool g_visited[10][10] = { false, };
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
		{
			if (map[i][j] == 1 && !g_visited[i][j])
			{
				queue<int> q;
				g_visited[i][j] = true;
				q.push(i * 10 + j);	//it is okay to use pair or structure.

				while (!q.empty())
				{
					int cur = q.front(); q.pop();

					int cx = cur % 10;
					int cy = cur / 10;
					group[cy][cx] = g_index;

					for (int dir = 0; dir < 4; ++dir)
					{
						int nx = cx + dx[dir];
						int ny = cy + dy[dir];

						if (nx < 0 || ny < 0 || nx >= m || ny >= n || map[ny][nx] == 0 || g_visited[ny][nx])
							continue;

						g_visited[ny][nx] = true;
						q.push(ny * 10 + nx);
					}
				}
				g_index++;
			}
		}
	return;
}

void getdistance()
{
	//in the group
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
		{
			if (group[i][j] != 0)
			{
				//north
				int cx = j;
				int cy = i - 1;
				int tdist = 0;
				while (cy >= 0)
				{
					if (group[cy][cx] == group[i][j]) break;
					if (group[cy][cx] != 0 && group[cy][cx] != group[i][j])
					{
						if (tdist < 2)	break;
						dist[group[i][j]][group[cy][cx]] = min(dist[group[i][j]][group[cy][cx]], tdist);
						break;
					}
					cy--;
					tdist++;
				}

				//east
				cx = j + 1;
				cy = i;
				tdist = 0;
				while (cx <= m - 1)
				{
					if (group[cy][cx] == group[i][j]) break;
					if (group[cy][cx] != 0 && group[cy][cx] != group[i][j])
					{
						if (tdist < 2)	break;
						dist[group[i][j]][group[cy][cx]] = min(dist[group[i][j]][group[cy][cx]], tdist);
						break;
					}
					cx++;
					tdist++;
				}

				//south
				cx = j;
				cy = i + 1;
				tdist = 0;
				while (cy <= n - 1)
				{
					if (group[cy][cx] == group[i][j]) break;
					if (group[cy][cx] != 0 && group[cy][cx] != group[i][j])
					{
						if (tdist < 2)	break;
						dist[group[i][j]][group[cy][cx]] = min(dist[group[i][j]][group[cy][cx]], tdist);
						break;
					}
					cy++;
					tdist++;
				}

				//west
				cx = j - 1;
				cy = i;
				tdist = 0;
				while (cx >= 0)
				{
					if (group[cy][cx] == group[i][j]) break;
					if (group[cy][cx] != 0 && group[cy][cx] != group[i][j])
					{
						if (tdist < 2)	break;
						dist[group[i][j]][group[cy][cx]] = min(dist[group[i][j]][group[cy][cx]], tdist);
						break;
					}
					cx--;
					tdist++;
				}
			}
		}
	return;
}

void dfs(int depth,int y, int x)
{
	if (depth == g_index - 1)
	{
		bool check[7] = { false, };

		//하나의 그룹인지 체크하는부분 필요
		vector<vector<int>> v;
		v.resize(g_index);
		int startv;
		for (int i = 1; i < g_index; ++i)
			for (int j = 1; j < g_index; ++j)
			{
				if (selected[i][j] == true)
				{
					startv = i;
					v[i].push_back(j);
					v[j].push_back(j);
				}
			}
		queue<int> q;
		bool visited[7] = { false, };
		q.push(startv);
		visited[startv] = true;

		while (!q.empty())
		{
			int cur = q.front(); q.pop();

			int len = v[cur].size();

			for (int i = 0; i < len; ++i)
			{
				int next = v[cur][i];

				if (!visited[next])
				{
					visited[next] = true;
					q.push(next);
				}
			}
		}
		
		for (int i = 1; i < g_index; ++i)
			if (!visited[i])	return;



		int sum = 0;
		for (int i = 1; i < g_index; ++i)
			for (int j = 1; j < g_index; ++j)
			{
				if (selected[i][j] == true)
				{
					sum += dist[i][j];
				}
			}
		
		if (ret > sum)
			ret = sum;
		//ret = min(ret, sum);

		return;
	}

	for (int i = y; i < g_index; ++i)
	{
		for (int j = x; j < g_index; ++j)
		{
			if (dist[i][j] != INF && dist[i][j] > 1)
			{
				selected[i][j] = true;
				dfs(depth + 1, i, j + 1);
				selected[i][j] = false;
			}
			
		}
		x = 0;
	}

}
int main()
{
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
			scanf("%d", &map[i][j]);

	grouping();

	for (int i = 1; i < g_index; ++i)
		for (int j = 1; j < g_index; ++j)
			dist[i][j] = INF;

	getdistance();

	dfs(1,1,1);

	if (ret == INF)
		printf("-1");
	else
		printf("%d", ret);

	return 0;
}
