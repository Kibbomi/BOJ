#include <stdio.h>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };
int map[20][20];
int n;
struct COORD {
	int y, x;
	int time;
}shark;
int sharksize, sharkeat,ret;

int main(void)
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			scanf("%d", &map[i][j]);

			if (map[i][j] == 9)
			{
				shark.y = i, shark.x = j, shark.time = 0;
				sharksize = 2, sharkeat = 0;
				map[i][j] = 0;
			}
		}
	
	bool update = true;
	while (update)
	{
		update = false;
		queue<COORD> q;
		bool visited[20][20] = { false, };
		q.push(shark);
		visited[shark.y][shark.x] = true;

		COORD candi;
		candi.x = 20, candi.y = 20, candi.time = 0;
		while (!q.empty())
		{
			COORD cur = q.front(); q.pop();
			if (candi.time != 0 && candi.time < cur.time) break;

			if (map[cur.y][cur.x] != 0 && map[cur.y][cur.x] < sharksize)
			{
				update = true;
				if (candi.y > cur.y)
					candi = cur;
				 if (candi.y == cur.y && candi.x > cur.x)
					candi = cur;
			}
			for (int dir = 0; dir < 4; dir++)
			{
				COORD next;
				next.y = cur.y + dy[dir];
				next.x = cur.x + dx[dir];
				next.time = cur.time + 1;

				if (next.x < 0 || next.y <0 || next.x >= n || next.y >= n || map[next.y][next.x] > sharksize)
					continue;
				if (visited[next.y][next.x] == false)
				{
					visited[next.y][next.x] = true;
					q.push(next);
				}
			}
		}
		if (update)
		{
			sharkeat++;
			if (sharksize == sharkeat)
			{
				sharkeat = 0;
				sharksize += 1;
			}
			map[candi.y][candi.x] = 0;
			shark = candi;
			shark.time = 0;
			ret += candi.time;
		}

	}
	printf("%d", ret);
	return 0;
}
