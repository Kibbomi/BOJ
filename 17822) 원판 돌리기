#include <cstdio>
#include <queue>
using namespace std;

int map[51][51];
int n, m, t;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };

void cpmap(int dest[51][51], int src[51][51])
{
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			dest[i][j] = src[i][j];
	return;
}
int main(void)
{
	scanf("%d %d %d", &n, &m, &t);

	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			scanf("%d", &map[i][j]);

	while (t--)
	{
		int x, d, k;
		scanf("%d %d %d", &x, &d, &k);
		int clone[51][51] = { 0 };
		cpmap(clone, map);

		for (int i = 1; i <= n; i++)
		{
			if (i%x == 0)
			{
				if (d == 0)
				{
					for (int j = 1; j <= m; j++)
						clone[i][(j - 1 + k) % m + 1] = map[i][j];
				}
				else
				{
					for (int j = 1; j <= m; j++)
						clone[i][(j - 1 + (m - k)) % m + 1] = map[i][j];
					
				}
			}
			else
			{
				for (int j = 1; j <= m; j++)
					clone[i][j] = map[i][j];
			}
		}

		//remove
		bool visited[51][51] = { false, };
		
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= m; j++)
			{
				if (!visited[i][j] && clone[i][j] != 0)
				{
					int num = 1;
					queue<pair<int, int>>q;
					visited[i][j] = true;
					q.push(make_pair(i, j));

					while (!q.empty())
					{
						int cx = q.front().second;
						int cy = q.front().first;
						q.pop();

						for (int dir = 0; dir < 4; dir++)
						{
							int nx = cx + dx[dir];
							int ny = cy + dy[dir];

							//x is circular
							if (nx == m + 1) nx = 1;
							if (nx == 0) nx = m;

							if (nx <1 || ny <1 || nx >m || ny >n || visited[ny][nx])
								continue;
							if (clone[cy][cx] != clone[ny][nx])
								continue;

							visited[ny][nx] = true;
							q.push(make_pair(ny, nx));
							num++;
						}
					}
					if (num == 1)
					{
						visited[i][j] = false;
					}
				}
			}

		double avg=0;
		int sum=0, div=0;
		bool flag = false;
		for(int i=1;i<=n;i++)
			for (int j = 1; j <= m; j++)
			{
				if (visited[i][j])
				{
					clone[i][j] = 0;
					flag = true;
				}
				sum += clone[i][j];
				if (clone[i][j] != 0)
					div++;
			}

		if (!flag)
		{
			avg = (double)sum / (double)div;
			for (int i = 1; i <= n; i++)
				for (int j = 1; j <= m; j++)
				{
					if (clone[i][j] != 0)
					{
						if (clone[i][j] < avg)
							clone[i][j]++;
						else if (clone[i][j] > avg)
							clone[i][j]--;
					}
				}
		}
		cpmap(map, clone);
	}
	int ret = 0;
	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			ret += map[i][j];
	printf("%d", ret);
	return 0;
}
