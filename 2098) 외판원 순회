#include <cstdio>
#include <algorithm>
using namespace std;

//index는 0번부터 15번까지 총 16개
int dist[16][16];
int cache[16][65537]; // 2^16 = 65536에서 +1
int n,start =0;

int tsp(int from, int bit, int bitcnt)
{
	//Memoization
	if (cache[from][bit] != 0)
		return cache[from][bit];

	//Finish Condition
	if (bitcnt == 1)
	{
		//find final bit
		int to = 0;
		int temp = 0;
		while (temp == 0) {
			temp = 1 & (bit >> ++to);
		}
		
		return dist[from][to] + dist[to][start];
		//return dist[from][to];
	}

	cache[from][bit] = 0x3f3f3f3f;
	for (int i = 0; i < n; i++)
	{
		//경로에 없다면, 다음으로..
		if (!(bit & (1 << i))) continue;
		
		int sol = dist[from][i] + tsp(i, bit & ~(1 << i), bitcnt-1);
		cache[from][bit] = min(cache[from][bit], sol);
	}
	return cache[from][bit];
	
}
int main(void)
{
	scanf("%d", &n);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			scanf("%d", &dist[i][j]);
			if (dist[i][j] == 0)
				dist[i][j] = 0x3f3f3f3f;
		}

	int bit = 0;
	//0번은 출발점이므로 제외
	for (int i = 1; i < n; i++)
		bit = bit | (1 << i);
	
	//bit에서 1의 개수. 즉, 남은 경로의 개수..
	printf("%d", tsp(start, bit, n - 1));
	return 0;
	
}
