#include <stdio.h>
#include <algorithm>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };

int map[100][100];
int group[100][100];



struct coord {
	int y, x;
	int time;
};


int main(void)
{
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			scanf("%d", &map[i][j]);

	//grouping
	bool visited[100][100] = { false };
	int groupnum = 1;
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			if (visited[i][j] == false && map[i][j] == 1)
			{
				queue<coord> q;
				coord now;
				now.x = j; now.y = i;

				q.push(now);
				visited[i][j] = true;

				while (!q.empty())
				{
					coord cur = q.front(); q.pop();

					group[cur.y][cur.x] = groupnum;

					for (int dir = 0; dir < 4; dir++)
					{
						coord next;
						next.y = cur.y + dy[dir];
						next.x = cur.x + dx[dir];

						if (next.y < 0 || next.x < 0 || next.y >= n || next.x >= n)
							continue;

						if (map[next.y][next.x] == 1 && visited[next.y][next.x] == false)
						{
							q.push(next);
							visited[next.y][next.x] = true;
						}
					}
				}
				groupnum++;
			}
		}


	//search
	queue<coord> retq;
	bool retvisited[100][100] = { false, };

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
		{
			if (group[i][j] != 0)
			{
				coord temp;
				temp.y = i;
				temp.x = j;
				temp.time = 0;
				retq.push(temp);
				retvisited[i][j] = true;
			}
		}
	int ret = 0x7ffffff;
	
	while (!retq.empty())
	{
		coord cur = retq.front(); retq.pop();


		for (int dir = 0; dir < 4; dir++)
		{
			coord next;
			next.y = cur.y + dy[dir];
			next.x = cur.x + dx[dir];
			next.time = cur.time + 1;
			

			if (next.y < 0 || next.x < 0 || next.y >= n || next.x >= n)
				continue;

			if (map[next.y][next.x] !=0 && (group[next.y][next.x] != group[cur.y][cur.x]))
			{
				int temp =  cur.time + map[next.y][next.x];
				if (temp < ret)
					ret = temp;
			}


			if (group[next.y][next.x] == 0 && retvisited[next.y][next.x] == false)
			{
				map[next.y][next.x] = next.time;
				group[next.y][next.x] = group[cur.y][cur.x];
				retvisited[next.y][next.x] = true;
				retq.push(next);
			}
		}
	}

	printf("%d", ret);


	return 0;
}
