#include <stdio.h>
#include <queue>
using namespace std;

//동서남북 위아래
const int dx[] = { 1,-1,0,0};
const int dy[] = { 0,0,1,-1};


struct coord {
	int y, x;
};

char map[100][100];
char mapunnormal[100][100];
bool visited[100][100];
bool visitedunnormal[100][100];
int n;




int main(void)
{
	
	scanf("%d", &n);

	for (int i = 0; i < n; i++){
		for (int j = 0; j < n; j++){
			scanf("%c", &map[i][j]);
			if (map[i][j] == '\n')
				j--;

			mapunnormal[i][j] = map[i][j];
			if (mapunnormal[i][j] == 'G')
				mapunnormal[i][j] = 'R';
		}
	}
	int normal = 0;
	int unnormal = 0;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (visited[i][j] == false)
			{
				//정상
				queue<coord> q;
				char pivot = map[i][j];
				coord now;
				now.y = i;
				now.x = j;

				q.push(now);
				visited[now.y][now.x] = true;

				while (!q.empty())
				{
					coord cur = q.front();
					q.pop();

					for (int dir = 0; dir < 4; dir++)
					{
						coord next;
						next.x = cur.x + dx[dir];
						next.y = cur.y + dy[dir];

						if (next.x < 0 || next.x >= n || next.y < 0 || next.y >= n)
							continue;

						if (map[next.y][next.x] == pivot && visited[next.y][next.x] == false)
						{
							q.push(next);
							visited[next.y][next.x] = true;
						}
					}
					
				}
				normal += 1;
			}


			if (visitedunnormal[i][j] == false)
			{
				//비정상
				queue<coord> q;
				char pivot = mapunnormal[i][j];
				coord now;
				now.y = i;
				now.x = j;

				q.push(now);
				visitedunnormal[now.y][now.x] = true;

				while (!q.empty())
				{
					coord cur = q.front();
					q.pop();

					for (int dir = 0; dir < 4; dir++)
					{
						coord next;
						next.x = cur.x + dx[dir];
						next.y = cur.y + dy[dir];

						if (next.x < 0 || next.x >= n || next.y < 0 || next.y >= n)
							continue;

						if (mapunnormal[next.y][next.x] == pivot && visitedunnormal[next.y][next.x] == false)
						{
							q.push(next);
							visitedunnormal[next.y][next.x] = true;
						}
					}

				}
				unnormal += 1;
			}


		}
	}

	printf("%d %d", normal, unnormal);

	return 0;
}
