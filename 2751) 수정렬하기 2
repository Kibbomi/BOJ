#include <stdio.h>
int n;
int ret[1000000];
int sol[1000000];
/*int partition(int left,int right)
{
	int pivot = ret[left];
	int low = left;
	int high = right + 1;

	do {
		do {
			low++;
		} while (low<=right && pivot > ret[low]);
		do {
			high--;
		} while (high>=left && pivot < ret[high]);
		if (low < high)
		{
			//멈추면
			int temp = ret[high];
			ret[high] = ret[low];
			ret[low] = temp;
		}
	} while (low < high);
	
	ret[left] = ret[high];
	ret[high] = pivot;
	return high;
		
}

void quick(int left,int right)
{
	if (left < right)
	{
		int pivot = partition(left,right);
		quick(left, pivot - 1);
		quick(pivot + 1, right);
	}
}*/

void merge(int left, int mid, int right)
{
	int write = left;

	int l = left;
	int h = mid + 1;

	while (l <= mid && h <= right)
	{
		if (ret[l] > ret[h])
		{
			sol[write] = ret[h++];
		}
		else
		{
			sol[write] = ret[l++];
		}
		write++;
	}
	if (l <= mid)
	{
		for(int i=l;i<=mid;i++)
			sol[write++] = ret[i];
	}
	else if (h <= right)
	{
		for (int i = h; i <= right; i++)
			sol[write++] = ret[i];
	}

	for (int i = left; i <= right; i++)
		ret[i] = sol[i];

}
void mergesort(int left, int right)
{
	if (left < right)
	{
		int mid = (left + right) / 2;
		mergesort(left, mid);
		mergesort(mid + 1, right);
		merge(left,mid ,right);
	}
}
int main(void)
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%d", &ret[i]);

	//quick(0, n - 1);
	mergesort(0, n - 1);
	for (int i = 0; i < n; i++)
		printf("%d\n", ret[i]);
	return 0;
}
