#include <stdio.h>
#include <algorithm>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };
const int hdx[] = { 1,2,2,1,-1,-2,-2,-1 };
const int hdy[] = { -2,-1,1,2,2,1,-1,-2 };

struct coord {
	int y, x;
	int time;
	int frog;
};

int map[200][200];
bool visited[200][200][30];

int main(void)
{
	int t;
	int n, m;

	scanf("%d", &t);
	scanf("%d %d", &m, &n);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			scanf("%d", &map[i][j]);
		
	queue<coord> q;
	coord start;
	start.y = 0; start.x = 0;
	start.frog = 0; start.time = 0;
	visited[start.y][start.x][start.frog] = true;

	q.push(start);

	int ret = 0x7ffffff;
	while (!q.empty())
	{
		coord cur = q.front(); q.pop();
		if (cur.y == n - 1 && cur.x == m - 1)
		{
			ret = cur.time;
			break;
		}
		for (int dir = 0; dir < 4; dir++)
		{
			coord next;
			next.y = cur.y + dy[dir];
			next.x = cur.x + dx[dir];
			next.time = cur.time + 1;
			next.frog = cur.frog;

			if (next.x < 0 || next.y < 0 || next.x >= m || next.y >= n)
				continue;
			
			if (map[next.y][next.x] == 0 && visited[next.y][next.x][next.frog] == false)
			{
				visited[next.y][next.x][next.frog] = true;
				q.push(next);
			}
		}

		for (int dir = 0; dir < 8; dir++)
		{
			coord next;
			next.y = cur.y + hdy[dir];
			next.x = cur.x + hdx[dir];
			next.time = cur.time + 1;
			next.frog = cur.frog + 1;

			if (next.frog > t)
				continue;
			if (next.x < 0 || next.y < 0 || next.x >= m || next.y >= n)
				continue;

			if (map[next.y][next.x] == 0 && visited[next.y][next.x][next.frog] == false)
			{
				visited[next.y][next.x][next.frog] = true;
				q.push(next);
			}
		}
	}
	if (ret == 0x7ffffff)
		printf("-1");
	else
		printf("%d", ret);

	return 0;
}
