#include <stdio.h>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0};
const int dy[] = { 0,0,1,-1};

struct coord {
	int y, x;
	int time;
};

int map[300][300];


int main(void)
{
	int y, x;
	bool flag = false;
	scanf("%d %d", &y, &x);

	for (int i = 0; i < y; i++)
		for (int j = 0; j < x; j++) {
			scanf("%d", &map[i][j]);
		}
	int year = 0;
	while (1)
	{
		year++;
		bool visited[300][300] = { false, };
		for (int i = 0; i < y; i++)
			for (int j = 0; j < x; j++) {
				if (map[i][j] != 0)
					visited[i][j] = true;
			}

		for (int i = 0; i < y; i++)
		{
			for (int j = 0; j < x; j++)
			{
				if (map[i][j] == 0 && visited[i][j] == false)
				{
					queue<coord> q;

					coord now;
					now.x = j;
					now.y = i;

					q.push(now);
					visited[i][j] = true;

					while (!q.empty())
					{
						coord cur = q.front(); q.pop();

						for (int dir = 0; dir < 4; dir++)
						{
							coord next;
							next.x = cur.x + dx[dir];
							next.y = cur.y + dy[dir];

							//우선 모든0을 방문해야함.
							if (next.x < 0 || next.y < 0 || next.x >= x || next.y >= y)
								continue;

							if (map[next.y][next.x] == 0 && visited[next.y][next.x] == false)
							{
								visited[next.y][next.x] = true;
								q.push(next);
							}
							else if (map[next.y][next.x] != 0)
							{
								map[next.y][next.x] -= 1;
							}
						}
					}
				}
			}
		}

		int num = 0;
		for (int i = 0; i < y; i++)
			for (int j = 0; j < x; j++) {
				if (map[i][j] != 0)
					visited[i][j] = false;
			}
		for (int i = 0; i < y; i++)
		{
			for (int j = 0; j < x; j++)
			{
				if (map[i][j] != 0 && visited[i][j] == false)
				{
					queue<coord> tq;
					coord now;
					now.x = j;
					now.y = i;
					
					tq.push(now);
					visited[i][j] = true;

					while (!tq.empty())
					{
						coord cur = tq.front(); tq.pop();

						for (int dir = 0; dir < 4; dir++)
						{
							coord next;
							next.x = cur.x + dx[dir];
							next.y = cur.y + dy[dir];

							if (next.x < 0 || next.y < 0 || next.x >= x || next.y >= y)
								continue;

							if (map[next.y][next.x] != 0 && visited[next.y][next.x] == false)
							{
								visited[next.y][next.x] = true;
								tq.push(next);
							}
							
						}
					}
					num += 1;
				}	
			}
		}

		if (num >= 2)
			break;
		else if (num == 0)
		{
			flag = true;
			printf("0");
			break;
		}
		
	}
	if(!flag)
	printf("%d", year);
	return 0;
}
