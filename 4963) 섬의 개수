//00:51 ~ 01:00
#include <stdio.h>
#include <queue>
using namespace std;

const int dx[] = { 1,1,1,0,-1,-1,-1,0 };
const int dy[] = { -1,0,1,1,1,0,-1,-1 };
struct COORD {
	int y, x;
};
int main(void)
{
	while (1)
	{
		int w, h;
		scanf("%d %d", &w, &h);

		if (w == 0 && h == 0)	return 0;

		int map[50][50] = { 0 ,};
		int group[50][50] = { 0, };
		int gpnum = 1;
		bool visited[50][50] = { false, };

		for (int i = 0; i < h; i++)
			for (int j = 0; j < w; j++)
				scanf("%d", &map[i][j]);
			
		for (int i = 0; i < h; i++)
			for (int j = 0; j < w; j++)
			{
				if (map[i][j] == 1 && !visited[i][j])
				{
					//bfs

					queue<COORD> q;
					COORD s;
					s.y = i, s.x = j;
					visited[i][j] = true;
					q.push(s);

					while (!q.empty())
					{
						COORD cur = q.front(); q.pop();
						group[cur.y][cur.x] = gpnum;
						for (int dir = 0; dir < 8; dir++)
						{
							COORD next;
							next.y = cur.y + dy[dir];
							next.x = cur.x + dx[dir];

							if (next.x < 0 || next.y < 0 || next.x >= w || next.y >= h || map[next.y][next.x] == 0)
								continue;

							if (visited[next.y][next.x] == false)
							{
								visited[next.y][next.x] = true;
								q.push(next);
							}

						}
					}
					gpnum++;

				}
			}


		printf("%d\n", gpnum - 1);
	}

	return 0;
}
