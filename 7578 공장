#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

int n, m;
vector <int> order;
vector <int> ret;

class Segment_tree {
public:
	Segment_tree() {}
	Segment_tree(int tree_size)
	{
		tree.resize(tree_size, 0);
	}

	void update_tree(int node, int start, int end, int target, int val)
	{
		if (target < start || end < target) return ;

		tree[node] += val;

		if (start != end)
		{
			int mid = (start + end) / 2;
			update_tree(2 * node, start, mid, target, val);
			update_tree(2 * node + 1, mid + 1, end, target, val);
		}
		return;
	}
	//개수를 반환해야함.
	int find_tree(int node, int start, int end, int l, int r)
	{
		//l,r은 고정 start, end는 node에 따라 변경

		if (end < l || r < start)
			return 0;
		if (l <= start && end <= r)
		{
			return tree[node];
		}
		int mid = (start + end) / 2;
		return find_tree(2 * node, start, mid, l, r) + find_tree(2 * node + 1, mid + 1, end, l, r);
	}
	//최솟값, 최대값
	vector<int> tree;
};

int main()
{
	scanf("%d", &n);
	order.resize(1000001);
	ret.resize(n + 1);

	for (int i = 1; i <= n; ++i){
		int val;
		scanf("%d", &val);
		order[val] = i;
	}

	for (int i = 1; i <= n; ++i) {
		int val;
		scanf("%d", &val);
		ret[order[val]] = i;
	}

	int h = (int)ceil(log2(n));
	int tree_size = 1 << (h + 1);
	Segment_tree ans(tree_size);

	long long int answer = 0;

	for (int i = 1; i <= n; ++i)
	{
		answer += ans.find_tree(1, 1, n, ret[i], n);
		ans.update_tree(1, 1, n, ret[i], 1);
	}
	

	printf("%lld", answer);
	return 0;
}
