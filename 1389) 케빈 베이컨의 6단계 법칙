#include <stdio.h>
#include <queue>
using namespace std;


const int dx[] = { 1,-1,0,0};
const int dy[] = { 0,0,1,-1};

int map[101][101];

int list[101];
int n, m;

struct coord {
	int y, x;
	int time;
};


int main(void)
{
	

	scanf("%d %d", &n, &m);

	for (int i = 0; i < m; i++)
	{
		int src, dest;
		scanf("%d %d", &src, &dest);

		map[src][dest] = 1;
		map[dest][src] = 1;
	}

	for (int i = 1; i <= n; i++)
	{
		int visited[101][101];

		for (int a = 0; a < 101; a++)
			for (int b = 0; b < 101; b++)
				visited[a][b] = false;
			
		queue<coord> q;
		coord now;
		now.y = i;

		for (int j = 1; j <= n; j++)
		{
			if (map[i][j] == 1 && visited[i][j] == false)
			{
				now.x = j;
				now.time = 1;
				q.push(now);
				visited[now.y][now.x] = true;
				visited[now.x][now.y] = true;
			}
		}

		while (!q.empty())
		{
			coord cur = q.front(); q.pop();
			list[i] += cur.time;
			for (int j = 1; j <= n; j++)
			{
				coord next;
				next.y = cur.x;
				next.x = j;
				next.time = cur.time +1;

				if (map[next.y][next.x] == 1 && visited[next.y][next.x] == false)
				{
					q.push(next);
					visited[next.y][next.x] = true;
					visited[next.x][next.y] = true;
				}
			}
		}
		


	}

	int min = 0x7ffffff;
	int index = -1;
	for (int i = 1; i <= n; i++)
	{
		if (min >list[i]){
			min = list[i];
			index = i;
		}
	}

	printf("%d", index);
	return 0;
}
