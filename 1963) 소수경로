#include <stdio.h>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0};
const int dy[] = { 0,0,1,-1};

struct coord {
	int y, x;
	int time;
	bool wall;
};

struct number {
	int a, b, c, d;
	int time;
};


bool isprime[10000] = { false, };

void calprime()
{
	//에라토스테네스의 체 만들기...
	for (int i = 2; i < 10000; i++)
		isprime[i] = true;

	for (int i = 2; i < 9999; i++)
	{
		if (isprime[i] == true)
		{
			for (int j = i + 1; j < 10000; j++)
			{
				if (j % i == 0)
					isprime[j] = false;
			}
		}
	}
}

int main(void)
{
	int t;
	scanf("%d", &t);
	calprime();
	for (int z = 0; z < t; z++)
	{
		int src, dest;
		bool visited[10000] = { false, };

		scanf("%d %d", &src, &dest);
		
		
		number ret;
		int temp = src;
		ret.d = temp % 10;
		temp /= 10;
		ret.c = temp % 10;
		temp /= 10;
		ret.b = temp % 10;
		temp /= 10;
		ret.a = temp % 10;
		ret.time = 0;
		queue<number> q;

		q.push(ret);
		temp = ret.a * 1000 + ret.b * 100 + ret.c * 10 + ret.d;
		visited[temp] = true;

		int result = -1;

		while (!q.empty())
		{
			number cur = q.front(); q.pop();
			int check = 0;
			check = cur.a * 1000 + cur.b * 100 + cur.c * 10 + cur.d;

			if (check == dest)
			{
				result = cur.time;
				break;
			}


			for (int i = 0; i < 4; i++)
			{
				for (int j = 0; j < 10; j++)
				{
					number next;

					if (i == 0 && j == 0)	continue;
					if (i == 0 && j > 0)
					{
						next.a = j;
						next.b = cur.b;
						next.c = cur.c;
						next.d = cur.d;
						next.time = cur.time + 1;
					}
					else if (i == 1)
					{
						next.a = cur.a;
						next.b = j;
						next.c = cur.c;
						next.d = cur.d;
						next.time = cur.time + 1;
					}
					else if (i == 2)
					{
						next.a = cur.a;
						next.b = cur.b;
						next.c = j;
						next.d = cur.d;
						next.time = cur.time + 1;
					}
					else if (i == 3)
					{
						next.a = cur.a;
						next.b = cur.b;
						next.c = cur.c;
						next.d = j;
						next.time = cur.time + 1;
					}

					int num = 0;
					num = next.a * 1000 + next.b * 100 + next.c * 10 + next.d;

					if (isprime[num] && visited[num] == false)
					{
						q.push(next);
						visited[num] = true;
					}

				}
			}

		}

		if (result == -1)
			printf("Impossible\n");
		else
			printf("%d\n", result);

	}
	return 0;
}
