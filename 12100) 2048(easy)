#include <stdio.h>
#include <algorithm>
#include <vector>
using namespace std;

int map[20][20];
int n;
int order[5];
int ret = -0x7fffffff;
//1 2 3 4동서남북

void cpmap(int dest[][20], int src[][20])
{
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			dest[i][j] = src[i][j];
	return;
}
void dfs(int depth)
{
	if (depth == 5)
	{
		int clone[20][20];
		cpmap(clone, map);

		for (int dir = 0; dir < 5; dir++)
		{
			if (order[dir] == 0)
			{
				for (int i = 0; i < n; i++)
				{
					vector<int> v;
					int index = n - 1;
					for (int j = n - 1; j >= 0; j--)
						if (clone[i][j] != 0)
						{
							v.push_back(clone[i][j]);
							clone[i][j] = 0;
						}

					int len = v.size();
					for (int k = 0; k < len;)
					{
						if (k == len - 1)
						{
							clone[i][index--] = v[k];
							k++;
							break;
						}
						if (v[k] == v[k + 1])
						{
							clone[i][index--] = v[k] + v[k + 1];
							k += 2;
						}
						else
						{
							clone[i][index--] = v[k];
							k += 1;
						}
					}
				}
			}
			else if (order[dir] == 1)
			{
				for (int i = 0; i < n; i++)
				{
					vector<int> v;
					int index = 0;
					for (int j = 0; j < n; j++)
						if (clone[i][j] != 0)
						{
							v.push_back(clone[i][j]);
							clone[i][j] = 0;
						}

					int len = v.size();
					for (int k = 0; k < len;)
					{
						if (k == len - 1)
						{
							clone[i][index++] = v[k];
							k++;
							break;
						}
						if (v[k] == v[k + 1])
						{
							clone[i][index++] = v[k] + v[k + 1];
							k += 2;
						}
						else
						{
							clone[i][index++] = v[k];
							k += 1;
						}
					}
				}
			}
			else if (order[dir] == 2)
			{
				for (int j = 0; j < n; j++)
				{
					vector<int> v;
					int index = n - 1;
					for (int i = n - 1; i >= 0; i--)
						if (clone[i][j] != 0)
						{
							v.push_back(clone[i][j]);
							clone[i][j] = 0;
						}

					int len = v.size();
					for (int k = 0; k < len;)
					{
						if (k == len - 1)
						{
							clone[index--][j] = v[k];
							k++;
							break;
						}
						if (v[k] == v[k + 1])
						{
							clone[index--][j] = v[k] + v[k + 1];
							k += 2;
						}
						else
						{
							clone[index--][j] = v[k];
							k += 1;
						}
					}
				}
			}
			else
			{
				for (int j = 0; j < n; j++)
				{
					vector<int> v;
					int index = 0;
					for (int i = 0; i <n; i++)
						if (clone[i][j] != 0)
						{
							v.push_back(clone[i][j]);
							clone[i][j] = 0;
						}

					int len = v.size();
					for (int k = 0; k < len;)
					{
						if (k == len - 1)
						{
							clone[index++][j] = v[k];
							k++;
							break;
						}
						if (v[k] == v[k + 1])
						{
							clone[index++][j] = v[k] + v[k + 1];
							k += 2;
						}
						else
						{
							clone[index++][j] = v[k];
							k += 1;
						}
					}
				}
			}
		}
		

		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				ret  = max(ret, clone[i][j]);
		
		return;
	}
	for (int i = 0; i < 4; i++)
	{
		order[depth] = i;
		dfs(depth + 1);
	}
	return;
}
int  main(void)
{
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			scanf("%d", &map[i][j]);
	//permutaion
	dfs(0);
	printf("%d", ret);
	return 0;
}
