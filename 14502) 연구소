#include <stdio.h>
#include <queue>
#include <algorithm>
using namespace std;
int n,m;
int map[8][8];

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1 };
int ret = -500;
void dfs(int depth, int y, int x)
{
	if (depth == 3)
	{
		int clone[8][8] = { 0 };
		bool visited[8][8] = { false, };
		queue<int> q;

		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
			{
				clone[i][j] = map[i][j];
				if (map[i][j] == 2)
				{
					q.push(i * 10 + j);
					visited[i][j] = true;
				}
			}
		
		while (!q.empty())
		{
			int cur = q.front(); q.pop();
			int cy = cur / 10;
			int cx = cur % 10;

			for (int dir = 0; dir < 4; dir++)
			{
				int nx = cx + dx[dir];
				int ny = cy + dy[dir];

				if (nx < 0 || ny < 0 || nx >= m || ny >= n || visited[ny][nx] || clone[ny][nx] == 1)
					continue;

				clone[ny][nx] = 2;
				visited[ny][nx] = true;
				q.push(ny * 10 + nx);
			}
		}
			int cnt = 0;
			for (int i = 0; i < n; i++)
				for (int j = 0; j < m; j++)
					if (clone[i][j] == 0)
						cnt++;

			ret = max(ret, cnt);
		return;
	}
	for (int i = y; i < n; i++)
	{
		for (int j = x; j < m; j++)
		{
			if (map[i][j] == 0)
			{
				map[i][j] = 1;
				dfs(depth + 1, i, j + 1);
				map[i][j] = 0;
			}
		}
		x = 0;
	}
	return;
}
int  main(void)
{
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			scanf("%d", &map[i][j]);

	//combination
	dfs(0, 0, 0);

	printf("%d", ret);
	return 0;
}
