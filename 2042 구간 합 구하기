#include <cstdio>
#include <algorithm>
#include <cmath>	//log, ceil
#include <vector>
using namespace std;

int n, m, k;
vector<long long int> arr;

class SGT {

public:
	SGT(){}
	SGT(long long int tree_size) { tree.resize(tree_size); }
	long long int init_tree(int node, int start, int end)
	{
		if (start == end)
			return tree[node] = arr[start];
		int mid = (start + end) / 2;
		return tree[node] = init_tree(2 * node, start, mid) + init_tree(2 * node + 1, mid + 1, end);
	}

	long long int sum_tree(int node, int start, int end, int left, int right)
	{
		//start end는 node의 coverage
		if (right < start || end < left)	
			return 0;
		if (left <= start && end <= right)
			return tree[node];

		int mid = (start + end) / 2;

		return sum_tree(2 * node, start, mid, left, right) + sum_tree(2 * node + 1, mid + 1, end, left, right);

	}
	void update_tree(int node, int start, int end, int index, long long int diff)
	{
		if (index < start || end < index)
			return;
		tree[node] += diff;
		if (start != end)
		{
			int mid = (start + end) / 2;
			update_tree(2 * node, start, mid, index, diff);
			update_tree(2 * node + 1, mid + 1, end, index, diff);
		}
		return;
	}
	vector<long long int> tree;
};

int main()
{
	scanf("%d %d %d", &n, &m, &k);
	arr.resize(n);	//for 1~n
	for (int i = 0; i < n; ++i)
		scanf("%d", &arr[i]);

	int h = (int)ceil(log2(n));
	int tree_size = 1 << (h + 1);
	
	SGT	sgt_tree(tree_size);
	//convert array to tree
	sgt_tree.init_tree(1, 0, n - 1);

	for (int i = 0; i < m + k; ++i)
	{
		int type, b, c;
		scanf("%d %d %d", &type, &b, &c);

		
		if (type == 1)
		{
			//update
			int diff = c - arr[b - 1];
			arr[b - 1] = c;
			sgt_tree.update_tree(1, 0, n - 1, b - 1, diff);	//array에서 b-1번 인덱스
		}
		else
		{
			//print the sum
			printf("%lld\n",sgt_tree.sum_tree(1, 0, n - 1, b - 1, c - 1));
		}
	}
	
	return 0;
}
