#include <stdio.h>
#include <queue>
using namespace std;

const int dx[] = { 1,-1,0,0 };
const int dy[] = { 0,0,1,-1};

char map[1002][1002] = { 0, };
bool firevisited[1002][1002] = { false, };
bool sgvisited[1002][1002] = { false, };

struct COORD {
	int y, x;
	int time;
	bool isfire;
};


int main(void)
{
	int t;
	scanf("%d", &t);
	
	while (t--)
	{
		int n, m;
		queue<COORD> q;
		bool getout = false;
		COORD sg, fire;
		fire.x = 0, fire.y = 0;
		scanf("%d %d", &m, &n);

		for(int i=0;i<1002;i++)
			for (int j = 0; j < 1002; j++)
			{
				sgvisited[i][j] = false;
				firevisited[i][j] = false;
				map[i][j] = 0;
			}
		for (int i = 1; i <= n; i++)
			for (int j = 1; j <= m; j++)
			{
				scanf("%c", &map[i][j]);
				if (map[i][j] == '\n')
					j--;

				if (map[i][j] == '*')
				{
					fire.y = i, fire.x = j, fire.time = 0, fire.isfire = true;
					q.push(fire);
					firevisited[fire.y][fire.x] = true;
				}
				if (map[i][j] == '@')
				{
					sg.y = i, sg.x = j, sg.time = 0, sg.isfire = false;
					map[i][j] = '.';
				}
			}
		q.push(sg);
		sgvisited[sg.y][sg.x] = true;
		

		while (!q.empty())
		{
			COORD cur = q.front(); q.pop();

			for (int dir = 0; dir < 4; dir++)
			{
				COORD next;
				next.time = cur.time + 1;
				next.y = cur.y + dy[dir];
				next.x = cur.x + dx[dir];
				next.isfire = cur.isfire;


				//불의 움직임
				if (cur.isfire)
				{
					if (next.y <1 || next.x <1 || next.x>m || next.y>n)	continue;
					if (map[next.y][next.x] == '.' && firevisited[next.y][next.x] == false)
					{
						//불 번짐.
						map[next.y][next.x] = '*';
						firevisited[next.y][next.x] = true;
						q.push(next);
					}
				}
				else
				{//상근이의 움직임
					if (next.y == 0 || next.x == 0 || next.x == m + 1 || next.y == n + 1)
					{
						//탈출
						printf("%d\n", next.time);
						while (!q.empty())
							q.pop();
						getout = true;
						break;
						//queue청소후 탈출
					}
					if (firevisited[next.y][next.x] == false && map[next.y][next.x] == '.' && sgvisited[next.y][next.x] == false)
					{
						sgvisited[next.y][next.x] = true;
						q.push(next);
					}
				}
			}
		}
		if (!getout)
			printf("IMPOSSIBLE\n");
	}
	return 0;
}
