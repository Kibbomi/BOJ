#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

struct disjojintset {
	vector<int> root;

	void disjointset_init(int n)
	{
		root.resize(n + 1);
		for (int i = 0; i <= n; ++i)
			root[i] = i;
	}

	int find(int x)
	{
		if (root[x] == x)
			return x;
		else
			return root[x] = find(root[x]);
	}

	void union_set(int x, int y)
	{
		x = find(x);
		y = find(y);

		if (x != y)
			root[y] = x;
	}
}djs;

vector <pair<int, pair<int, int>>> edge;

int main()
{
	int n, m;
	scanf("%d", &n);
	scanf("%d", &m);
	djs.disjointset_init(n);
	for (int i = 0; i < m; ++i)
	{
		int from, to, val;
		scanf("%d %d %d", &from, &to, &val);

		edge.push_back(make_pair(val, make_pair(from, to)));
	}
	sort(edge.begin(), edge.end());

	int count = 0;
	int ret = 0;
	for (int i = 0; i < m; ++i)
	{
		if (count == n - 1)
			break;

		int from, to, val;
		val = edge[i].first;
		from = edge[i].second.first;
		to = edge[i].second.second;

		if (djs.find(from) != djs.find(to))
		{
			djs.union_set(from, to);
			count++;
			ret += val;
		}
	}


	printf("%d", ret);

	return 0;
}
