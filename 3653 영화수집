#include <cstdio>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

vector <int> arr;	//store input data.

class Segment_tree {
public:
	Segment_tree() {}
	Segment_tree(int tree_size)
	{
		tree.resize(tree_size);
	}
	int init_tree(vector<int> &arr, int node, int start, int end)
	{
		if (start == end)
			return tree[node] = arr[start];

		int mid = (start + end) / 2;
		return tree[node] = init_tree(arr, 2 * node, start, mid) + init_tree(arr, 2 * node + 1, mid + 1, end);
	}

	int find_tree(int node, int start, int end, int l, int r)
	{
		if (end < l || r < start)
			return 0;
		if (l <= start && end <= r)
			return tree[node];

		int mid = (start + end) / 2;
		return find_tree(2 * node, start, mid, l, r) + find_tree(2 * node + 1, mid + 1, end, l, r);
	}
	
	int update_tree(int node, int start, int end, int target, int val)
	{
		if (end < target || target < start)
			return tree[node];
		if (start == end)
			return tree[node] = val;

		int mid = (start + end) / 2;
		return tree[node] = update_tree(2 * node, start, mid, target, val) + update_tree(2 * node + 1, mid + 1, end, target, val);
	}


	vector<int> tree;
};

int main()
{
	int t;
	scanf("%d", &t);

	while (t--)
	{
		int n, m;
		scanf("%d %d", &n, &m);

		vector<int> arr,booklocation;
		arr.resize(n + m);
		booklocation.resize(n + 1);

		for (int i = 1; i <= n; ++i)
			booklocation[i] = m - 1 + i;

		for (int i = 0; i < m; ++i)
			arr[i] = 0;
		for (int i = m; i < n+m; ++i)
			arr[i] = 1;

		int h = (int)ceil(log2(n + m));
		int tree_size = 1 << (h + 1);
		Segment_tree tree(tree_size);	//arrange memory
		tree.init_tree(arr, 1, 0, n + m - 1);	//node, arr indexs

		for (int i = 1; i <= m; ++i)
		{
			//다음 놓을곳 arr[m-i]
			int select;
			scanf("%d", &select);

			printf("%d ", tree.find_tree(1, 0, n + m - 1, 0, booklocation[select] - 1));
			tree.update_tree(1, 0, m + n - 1, booklocation[select], 0);
			tree.update_tree(1, 0, m + n - 1, m - i, 1);
			//booklocation[select]은 select번의 책의 arr상의 index를 저장
			booklocation[select] = m - i;
		}
		printf("\n");
	}

	return 0;
}
